PoE2 四大数据源集成GUI构建指导

=== 核心目标 ===
创建专业的PoE2风格GUI应用，完整集成四大核心数据源、RAG AI训练和PoB2高度集成推荐功能。

=== 四大数据源集成要求 ===

1. 数据源健康监控面板
   - 实时显示四大数据源连接状态
   - PoE2Scout API、PoE Ninja、Path of Building 2、PoE2DB
   - 每30秒自动刷新状态
   - 显示具体错误信息和连接统计

2. 统一数据源管理
   - 使用 get_all_four_sources() 获取所有客户端
   - 使用 health_check_all_sources() 进行健康检查
   - 缓存配置和速率限制设置
   - 弹性错误处理和降级策略

=== RAG AI训练界面要求 ===

1. 训练配置面板
   - 联盟选择 (Standard, Hardcore, SSF)
   - GitHub PoB2模式开关
   - 训练数据量限制
   - 质量过滤阈值设置

2. 训练进度监控
   - 实时训练日志显示
   - 四个训练阶段进度条
   - 训练统计信息 (知识条目、向量维度、索引大小)
   - 训练时间和性能监控

3. 异步训练线程
   - 使用 RAGTrainingThread 进行后台训练
   - 不阻塞主界面的响应
   - 支持训练中断和错误恢复
   - 训练结果保存和加载

=== PoB2高度集成界面要求 ===

1. 构筑需求输入
   - 角色职业选择 (6个PoE2职业)
   - 构筑目标 (清图、Boss、平衡、新手、高难)
   - 预算设置 (Divine Orb计价)
   - 高级选项 (抗性、DPS、生存需求)

2. PoB2连接状态
   - 自动检测本地PoB2安装
   - GitHub模式 vs 本地模式切换
   - PoB2数据源可用性实时监控
   - 连接错误诊断和修复建议

3. 推荐结果展示
   - 表格形式显示推荐构筑
   - 构筑名称、主技能、预估DPS、预估EHP、成本、推荐度
   - 支持排序和筛选
   - 构筑详情查看和比较

4. PoB2导入导出
   - 生成标准PoB2导入码
   - 一键复制到剪贴板
   - 验证导入码有效性
   - 支持构筑链接分享

=== F12开发者控制台要求 ===

1. 控制台功能
   - F12快捷键切换显示/隐藏
   - 类似浏览器开发者工具的界面
   - 系统日志实时显示
   - 支持命令输入和执行

2. 调试命令支持
   - health_check: 执行四大数据源健康检查
   - list_sources: 列出所有数据源状态
   - system_info: 显示系统信息
   - clear: 清空控制台日志
   - rag_status: 显示RAG训练状态

3. 日志系统
   - 分级日志显示 (ERROR, WARNING, INFO, DEBUG)
   - 时间戳和模块标识
   - 日志过滤和搜索功能
   - 日志导出和保存

=== PoE2风格主题要求 ===

1. 颜色配色方案
   - 背景色: #0a0a0a (深黑)
   - 表面色: #1a1a1a, #2a2a2a (渐层灰)
   - 主色调: #c9aa71 (PoE2金色)
   - 强调色: #8b4513 (褐色)
   - 文本色: #f0f0f0, #c0c0c0

2. 界面元素样式
   - 按钮: 金色悬停效果，暗色边框
   - 标签页: 金色选中状态，渐变效果
   - 进度条: 金色填充，暗色背景
   - 表格: 金色选中行，暗色网格线

3. 字体和图标
   - 主字体: Segoe UI, Arial
   - 等宽字体: Consolas, Monaco (控制台)
   - 状态图标: ✅ ❌ ⚠️ 🔄 等Unicode符号
   - 功能图标: 🖥️ 🧠 ⚡ 🔧 等分类图标

=== 界面布局要求 ===

1. 主窗口布局
   - 最小尺寸: 1200x800
   - 推荐尺寸: 1400x900
   - 支持窗口缩放和最大化
   - 保存和恢复窗口状态

2. 标签页设计
   - 三个主要标签页: 数据源监控、RAG训练、PoB2推荐
   - 标签页图标和简洁标题
   - 标签页内容自适应大小
   - 标签切换动画效果 (可选)

3. 可拆分布局
   - 上半部分: 主要功能区域
   - 下半部分: F12开发者控制台 (可隐藏)
   - QSplitter支持拖拽调整比例
   - 默认比例 3:1

=== 异步处理要求 ===

1. 网络请求异步化
   - 所有数据源请求使用异步线程
   - 避免界面冻结和无响应
   - 显示加载状态和进度指示

2. 长时间操作处理
   - RAG训练使用后台线程
   - PoB2数据提取使用工作线程
   - 支持操作取消和中断

3. 定时任务
   - 数据源健康检查定时器 (30秒)
   - PoB2连接状态检查定时器 (60秒)
   - GUI状态自动保存定时器 (300秒)

=== 错误处理要求 ===

1. 用户友好的错误显示
   - QMessageBox显示重要错误
   - 状态栏显示轻微警告
   - 控制台显示详细错误信息
   - 错误恢复建议和操作指导

2. 网络错误处理
   - 连接超时友好提示
   - 网络不可达时的降级模式
   - 自动重试机制和指数退避
   - 离线模式支持

3. 数据错误处理
   - 无效数据过滤和验证
   - 缓存数据损坏修复
   - 配置文件错误恢复
   - 数据格式版本兼容性

=== 性能优化要求 ===

1. 界面响应性
   - 主线程不执行耗时操作
   - 列表和表格虚拟化 (大量数据时)
   - 图片和资源懒加载
   - 界面更新批量处理

2. 内存管理
   - 及时释放不需要的资源
   - 缓存大小限制和LRU策略
   - 大对象使用弱引用
   - 定期垃圾回收触发

3. 网络优化
   - 请求合并和批量处理
   - 智能缓存和条件请求
   - 连接池复用
   - 压缩传输支持

=== 配置和持久化 ===

1. 用户配置保存
   - 窗口大小和位置
   - 界面布局和标签页状态
   - 用户偏好设置
   - 数据源配置参数

2. 缓存管理
   - 四大数据源缓存文件
   - RAG训练结果缓存
   - PoB2数据缓存
   - 缓存过期和清理策略

3. 日志管理
   - 应用日志文件轮转
   - 日志级别动态调整
   - 错误日志自动上报 (可选)
   - 调试信息本地保存

=== 测试和验证 ===

1. 功能测试点
   - 四大数据源连接测试
   - RAG训练完整流程测试
   - PoB2集成功能测试
   - F12控制台命令测试
   - 界面响应性测试

2. 错误场景测试
   - 网络断开情况处理
   - 数据源服务不可用
   - PoB2安装缺失处理
   - 内存不足情况
   - 磁盘空间不足

3. 性能测试
   - 大量构筑数据加载
   - 长时间运行稳定性
   - 内存泄漏检测
   - CPU使用率监控

=== 部署和分发 ===

1. 依赖管理
   - requirements.txt准确性
   - PyQt6依赖版本锁定
   - 可选依赖明确标识
   - 虚拟环境兼容性

2. 打包 (可选)
   - PyInstaller单文件打包
   - 资源文件正确包含
   - 依赖库完整性检查
   - 多平台兼容性测试

3. 文档完整性
   - README.md使用说明
   - 故障排除指南
   - API文档和示例代码
   - 开发者贡献指南

=== 实现检查清单 ===

核心功能:
[ ] 四大数据源健康监控面板
[ ] RAG AI训练管理界面
[ ] PoB2高度集成推荐系统
[ ] F12开发者控制台

界面设计:
[ ] PoE2风格主题应用
[ ] 响应式布局设计
[ ] 异步操作处理
[ ] 错误友好显示

高级功能:
[ ] 配置持久化
[ ] 缓存管理
[ ] 性能监控
[ ] 日志系统

质量保证:
[ ] 功能完整性测试
[ ] 错误场景测试
[ ] 性能压力测试
[ ] 用户体验测试