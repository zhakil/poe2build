请实现PoE2智能构筑生成器的前端用户界面：

## 15.1 HTML模板设计

### 主页面模板 (web/templates/index.html)
实现要求：
1. **页面结构**
   - 响应式HTML5文档结构
   - 语义化HTML标签
   - 无障碍访问支持 (ARIA标签)
   - SEO友好的元标签

2. **核心布局区域**
   - 导航栏：系统状态、功能入口
   - 主内容区：构筑生成器表单
   - 侧边栏：快速操作和帮助信息
   - 底部：系统信息和链接

3. **PoE2主题设计**
   - 深色主题背景 (#1a1a1a, #2d2d30)
   - 金色强调色 (#c9aa71, #f4e4bc)
   - 蓝色辅助色 (#4a90e2, #7bb3f0)
   - PoE2风格的边框和装饰元素

### 构筑生成器表单区域
```html
<!-- 构筑配置表单 -->
<form id="build-generator-form" class="poe2-form">
    <!-- 职业选择 -->
    <section class="form-section" id="class-selection">
        <h3 class="section-title">选择职业</h3>
        <div class="class-grid">
            <!-- 职业卡片，带图标和描述 -->
        </div>
    </section>
    
    <!-- 构筑目标 -->
    <section class="form-section" id="build-goal">
        <h3 class="section-title">构筑目标</h3>
        <div class="goal-options">
            <!-- 目标选择按钮 -->
        </div>
    </section>
    
    <!-- 预算配置 -->
    <section class="form-section" id="budget-config">
        <h3 class="section-title">预算设置</h3>
        <div class="budget-controls">
            <!-- 预算滑块和货币选择 -->
        </div>
    </section>
    
    <!-- 高级选项 -->
    <section class="form-section collapsible" id="advanced-options">
        <h3 class="section-title expandable">高级选项</h3>
        <div class="advanced-panel">
            <!-- 高级配置选项 -->
        </div>
    </section>
</form>
```

### 结果展示区域
```html
<!-- 构筑推荐结果 -->
<div id="build-results" class="results-container">
    <div class="results-header">
        <h2>推荐构筑</h2>
        <div class="results-controls">
            <!-- 排序、过滤控件 -->
        </div>
    </div>
    
    <div class="builds-grid" id="builds-container">
        <!-- 构筑卡片容器 -->
    </div>
    
    <!-- 分页控件 -->
    <div class="pagination" id="results-pagination">
        <!-- 分页按钮 -->
    </div>
</div>
```

## 15.2 CSS样式实现

### 主题样式 (web/static/css/poe2-theme.css)
1. **CSS变量定义**
```css
:root {
    /* PoE2主题色彩 */
    --poe2-bg-primary: #1a1a1a;
    --poe2-bg-secondary: #2d2d30;
    --poe2-bg-tertiary: #3d3d40;
    
    --poe2-text-primary: #f4e4bc;
    --poe2-text-secondary: #c9aa71;
    --poe2-text-muted: #8a8a8a;
    
    --poe2-accent-gold: #c9aa71;
    --poe2-accent-blue: #4a90e2;
    --poe2-accent-red: #dc3545;
    --poe2-accent-green: #28a745;
    
    /* 间距和尺寸 */
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    
    /* 动画 */
    --transition-fast: 0.15s ease;
    --transition-normal: 0.3s ease;
    --transition-slow: 0.5s ease;
}
```

2. **基础样式重置**
   - 现代CSS重置
   - Box-sizing: border-box
   - 响应式字体大小
   - 无障碍焦点样式

3. **PoE2装饰元素**
```css
/* PoE2风格边框 */
.poe2-border {
    border: 2px solid var(--poe2-accent-gold);
    border-image: linear-gradient(45deg, 
        var(--poe2-accent-gold), 
        transparent, 
        var(--poe2-accent-gold)
    ) 1;
    position: relative;
}

.poe2-border::before {
    content: '';
    position: absolute;
    top: -4px;
    left: -4px;
    right: -4px;
    bottom: -4px;
    border: 1px solid var(--poe2-accent-gold);
    opacity: 0.3;
    pointer-events: none;
}

/* 发光效果 */
.poe2-glow {
    box-shadow: 
        0 0 10px var(--poe2-accent-gold),
        inset 0 0 10px rgba(201, 170, 113, 0.1);
}
```

### 组件样式 (web/static/css/components.css)
1. **职业选择卡片**
```css
.class-card {
    background: var(--poe2-bg-secondary);
    border: 2px solid transparent;
    border-radius: 8px;
    padding: var(--spacing-lg);
    text-align: center;
    cursor: pointer;
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
}

.class-card:hover {
    border-color: var(--poe2-accent-gold);
    transform: translateY(-2px);
    box-shadow: var(--poe2-glow);
}

.class-card.selected {
    border-color: var(--poe2-accent-gold);
    background: linear-gradient(135deg, 
        var(--poe2-bg-secondary), 
        rgba(201, 170, 113, 0.1)
    );
}

.class-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto var(--spacing-md);
    background-size: cover;
    border-radius: 50%;
}
```

2. **表单控件样式**
```css
.poe2-input {
    background: var(--poe2-bg-tertiary);
    border: 1px solid var(--poe2-accent-gold);
    color: var(--poe2-text-primary);
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: 4px;
    font-family: inherit;
}

.poe2-button {
    background: linear-gradient(135deg, 
        var(--poe2-accent-gold), 
        #b8964a
    );
    color: var(--poe2-bg-primary);
    border: none;
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-fast);
}

.poe2-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(201, 170, 113, 0.3);
}
```

### 响应式样式 (web/static/css/responsive.css)
1. **移动端适配**
```css
/* 平板设备 */
@media (max-width: 768px) {
    .class-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-md);
    }
    
    .form-section {
        margin-bottom: var(--spacing-lg);
    }
}

/* 手机设备 */
@media (max-width: 480px) {
    .class-grid {
        grid-template-columns: 1fr;
    }
    
    .results-container {
        padding: var(--spacing-sm);
    }
}
```

## 15.3 JavaScript实现

### 主应用逻辑 (web/static/js/app.js)
1. **应用初始化**
```javascript
// PoE2构筑生成器主应用
class PoE2BuildGenerator {
    constructor() {
        this.api = new PoE2API();
        this.ui = new PoE2UI();
        this.websocket = new PoE2WebSocket();
        this.currentRequest = null;
        this.currentResults = [];
    }
    
    async init() {
        await this.loadClassData();
        this.bindEvents();
        this.setupWebSocket();
        await this.checkSystemHealth();
    }
    
    bindEvents() {
        // 职业选择事件
        document.querySelectorAll('.class-card').forEach(card => {
            card.addEventListener('click', this.selectClass.bind(this));
        });
        
        // 表单提交事件
        document.getElementById('build-generator-form')
            .addEventListener('submit', this.generateBuilds.bind(this));
        
        // 高级选项折叠
        document.querySelectorAll('.expandable').forEach(trigger => {
            trigger.addEventListener('click', this.toggleAdvanced.bind(this));
        });
    }
}
```

2. **构筑生成流程**
```javascript
async generateBuilds(event) {
    event.preventDefault();
    
    try {
        // 显示加载状态
        this.ui.showLoading();
        
        // 收集表单数据
        const requestData = this.collectFormData();
        
        // 验证输入
        const validation = await this.api.validateRequest(requestData);
        if (!validation.valid) {
            throw new Error(validation.message);
        }
        
        // 发送生成请求
        this.currentRequest = await this.api.generateBuilds(requestData);
        
        // 等待结果
        const results = await this.waitForResults(this.currentRequest.id);
        
        // 显示结果
        this.displayResults(results);
        
    } catch (error) {
        this.ui.showError(error.message);
    } finally {
        this.ui.hideLoading();
    }
}
```

### API调用封装 (web/static/js/api.js)
1. **HTTP客户端封装**
```javascript
class PoE2API {
    constructor(baseURL = '/api/v1') {
        this.baseURL = baseURL;
        this.defaultHeaders = {
            'Content-Type': 'application/json',
        };
    }
    
    async request(method, endpoint, data = null) {
        const url = `${this.baseURL}${endpoint}`;
        const options = {
            method,
            headers: this.defaultHeaders,
        };
        
        if (data) {
            options.body = JSON.stringify(data);
        }
        
        const response = await fetch(url, options);
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'API请求失败');
        }
        
        return await response.json();
    }
    
    // API方法
    async generateBuilds(requestData) {
        return await this.request('POST', '/build/generate', requestData);
    }
    
    async getSystemHealth() {
        return await this.request('GET', '/health');
    }
    
    async validateRequest(requestData) {
        return await this.request('POST', '/build/validate', requestData);
    }
}
```

### UI组件系统 (web/static/js/components.js)
1. **构筑卡片组件**
```javascript
class BuildCard {
    constructor(buildData) {
        this.data = buildData;
        this.element = this.createElement();
    }
    
    createElement() {
        const card = document.createElement('div');
        card.className = 'build-card poe2-border';
        card.innerHTML = this.generateHTML();
        this.bindEvents(card);
        return card;
    }
    
    generateHTML() {
        return `
            <div class="build-header">
                <h3 class="build-name">${this.data.name}</h3>
                <div class="build-class">${this.data.character_info.class}</div>
            </div>
            <div class="build-stats">
                <div class="stat-group">
                    <span class="stat-label">DPS</span>
                    <span class="stat-value">${this.formatNumber(this.data.build_stats.dps)}</span>
                </div>
                <div class="stat-group">
                    <span class="stat-label">EHP</span>
                    <span class="stat-value">${this.formatNumber(this.data.build_stats.ehp)}</span>
                </div>
                <div class="stat-group">
                    <span class="stat-label">成本</span>
                    <span class="stat-value">${this.data.cost_analysis.total} Divine</span>
                </div>
            </div>
            <div class="build-actions">
                <button class="poe2-button view-details" data-build-id="${this.data.id}">
                    查看详情
                </button>
                <button class="poe2-button export-pob2" data-build-id="${this.data.id}">
                    导出PoB2
                </button>
            </div>
        `;
    }
}
```

2. **加载动画组件**
```javascript
class LoadingSpinner {
    constructor(container) {
        this.container = container;
        this.element = this.createElement();
    }
    
    createElement() {
        const spinner = document.createElement('div');
        spinner.className = 'loading-spinner';
        spinner.innerHTML = `
            <div class="spinner-ring"></div>
            <div class="spinner-text">正在生成构筑推荐...</div>
            <div class="spinner-progress">
                <div class="progress-bar"></div>
                <div class="progress-text">0%</div>
            </div>
        `;
        return spinner;
    }
    
    updateProgress(progress, message) {
        const progressBar = this.element.querySelector('.progress-bar');
        const progressText = this.element.querySelector('.progress-text');
        const spinnerText = this.element.querySelector('.spinner-text');
        
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${Math.round(progress)}%`;
        if (message) {
            spinnerText.textContent = message;
        }
    }
}
```

### WebSocket实时通信 (web/static/js/websocket.js)
1. **WebSocket连接管理**
```javascript
class PoE2WebSocket {
    constructor() {
        this.ws = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.callbacks = {};
    }
    
    connect() {
        const wsUrl = `ws://${window.location.host}/ws/build-progress`;
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = this.onOpen.bind(this);
        this.ws.onmessage = this.onMessage.bind(this);
        this.ws.onclose = this.onClose.bind(this);
        this.ws.onerror = this.onError.bind(this);
    }
    
    onMessage(event) {
        const data = JSON.parse(event.data);
        
        switch (data.type) {
            case 'progress':
                this.handleProgress(data);
                break;
            case 'complete':
                this.handleComplete(data);
                break;
            case 'error':
                this.handleError(data);
                break;
        }
    }
    
    handleProgress(data) {
        const callback = this.callbacks[data.build_id];
        if (callback && callback.onProgress) {
            callback.onProgress(data.progress, data.message);
        }
    }
}
```

## 15.4 交互体验设计

### 动画效果
1. **页面加载动画**
   - 渐入效果
   - 骨架屏加载
   - 进度指示器

2. **交互反馈动画**
   - 按钮点击效果
   - 卡片悬停动画
   - 表单验证动画

3. **状态转换动画**
   - 加载到结果的平滑过渡
   - 错误状态提示动画
   - 成功状态庆祝动画

### 响应式交互
1. **桌面端优化**
   - 鼠标悬停效果
   - 键盘导航支持
   - 拖拽排序功能

2. **移动端优化**
   - 触摸友好的控件大小
   - 滑动手势支持
   - 移动端专用布局

## 15.5 可访问性支持

### ARIA标签
1. **语义化标记**
2. **屏幕阅读器支持**
3. **键盘导航**
4. **焦点管理**

### 用户偏好
1. **深色/浅色主题切换**
2. **字体大小调节**
3. **动画减少选项**
4. **高对比度模式**

## 15.6 性能优化

### 资源优化
1. **图片懒加载**
2. **CSS/JS代码分割**
3. **资源压缩**
4. **CDN配置**

### 运行时优化
1. **虚拟滚动**
2. **防抖和节流**
3. **缓存策略**
4. **内存管理**

请确保前端实现：
1. 完整的PoE2主题设计
2. 响应式布局支持
3. 现代JavaScript特性使用
4. 良好的用户体验
5. 无障碍访问支持
6. 高性能和优化
7. 与后端API完美集成

实现时请注重PoE2玩家的使用习惯，提供直观的构筑配置界面和详细的结果展示，确保专业的游戏工具体验。