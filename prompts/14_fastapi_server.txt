请实现PoE2智能构筑生成器的FastAPI Web服务器：

## 14.1 FastAPI主应用实现

### 主应用文件 (src/poe2build/web/app.py)
实现要求：
1. **应用初始化**
   - 集成现有PoE2AIOrchestrator
   - 配置CORS中间件
   - 设置静态文件服务
   - 配置API文档 (Swagger UI)
   - 集成日志系统

2. **中间件配置**
   - CORS配置（允许前端访问）
   - 错误处理中间件
   - 请求日志中间件
   - 性能监控中间件

3. **路由注册**
   - 构筑API路由
   - 健康检查路由
   - 静态文件路由
   - WebSocket路由（实时通信）

### 配置系统
```python
# Web服务器配置结构
web_config = {
    "host": "localhost",
    "port": 8080,
    "debug": True,
    "cors": {
        "allow_origins": ["http://localhost:3000", "http://127.0.0.1:3000"],
        "allow_credentials": True,
        "allow_methods": ["*"],
        "allow_headers": ["*"]
    },
    "static": {
        "directory": "web/static",
        "mount_path": "/static"
    },
    "templates": {
        "directory": "web/templates"
    }
}
```

## 14.2 API路由实现

### 构筑API路由 (src/poe2build/web/routes/build_routes.py)
实现以下API端点：

1. **POST /api/v1/build/generate**
   - 功能：生成构筑推荐
   - 请求体：构筑配置参数
   - 响应：构筑推荐列表
   - 支持异步处理

2. **GET /api/v1/build/templates**
   - 功能：获取构筑模板
   - 响应：可用的构筑模板列表

3. **POST /api/v1/build/validate**
   - 功能：验证构筑配置
   - 请求体：构筑配置参数
   - 响应：验证结果和建议

4. **GET /api/v1/build/{build_id}**
   - 功能：获取特定构筑详情
   - 响应：构筑详细信息

5. **POST /api/v1/build/{build_id}/export**
   - 功能：导出PoB2代码
   - 响应：PoB2导入代码

### 健康检查路由 (src/poe2build/web/routes/health_routes.py)
1. **GET /api/v1/health**
   - 功能：系统健康检查
   - 响应：所有组件状态

2. **GET /api/v1/health/{component}**
   - 功能：特定组件健康检查
   - 响应：指定组件详细状态

3. **GET /api/v1/status**
   - 功能：系统状态概览
   - 响应：系统运行统计

### 静态文件路由 (src/poe2build/web/routes/static_routes.py)
1. **GET /**
   - 功能：首页
   - 响应：index.html

2. **GET /build**
   - 功能：构筑生成器页面
   - 响应：build-generator.html

3. **GET /monitor**
   - 功能：系统监控页面
   - 响应：system-monitor.html

## 14.3 请求/响应模型

### 请求模型 (src/poe2build/web/models/build_request.py)
```python
# 构筑生成请求模型
class BuildGenerationRequest(BaseModel):
    # 基础配置
    character_class: str
    ascendancy: Optional[str] = None
    goal: str  # "clear_speed", "boss_killing", "balanced"
    
    # 预算配置
    budget: BudgetConfig
    
    # 偏好设置
    preferences: BuildPreferences
    
    # 高级选项
    advanced: Optional[AdvancedOptions] = None
    
    # RAG选项
    rag_options: Optional[RAGOptions] = None

# 预算配置
class BudgetConfig(BaseModel):
    amount: float
    currency: str = "divine"
    flexibility: float = 0.2  # 预算弹性20%

# 构筑偏好
class BuildPreferences(BaseModel):
    playstyle: str  # "safe", "aggressive", "balanced"
    damage_type: Optional[str] = None
    defense_priority: List[str] = []
    skill_preferences: List[str] = []
```

### 响应模型 (src/poe2build/web/models/build_response.py)
```python
# 构筑推荐响应
class BuildRecommendationResponse(BaseModel):
    success: bool
    recommendations: List[BuildRecommendation]
    metadata: ResponseMetadata
    rag_context: Optional[RAGContext] = None

# 单个构筑推荐
class BuildRecommendation(BaseModel):
    id: str
    name: str
    description: str
    
    # 核心信息
    character_info: CharacterInfo
    build_stats: BuildStats
    cost_analysis: CostAnalysis
    
    # 详细配置
    skill_gems: List[SkillGemConfig]
    equipment: EquipmentConfig
    passive_tree: PassiveTreeConfig
    
    # PoB2集成
    pob2_code: Optional[str] = None
    pob2_stats: Optional[Dict] = None
    
    # RAG信息
    rag_confidence: float
    similar_builds: List[str] = []
```

## 14.4 WebSocket实时通信

### WebSocket端点 (src/poe2build/web/routes/websocket_routes.py)
1. **WS /ws/build-progress**
   - 功能：构筑生成进度实时推送
   - 消息类型：progress, error, complete

2. **WS /ws/system-status**
   - 功能：系统状态实时更新
   - 消息类型：component_status, system_alert

### WebSocket消息格式
```python
# 进度消息
class ProgressMessage(BaseModel):
    type: str = "progress"
    build_id: str
    stage: str  # "data_collection", "rag_analysis", "pob2_calculation"
    progress: float  # 0-100
    message: str

# 完成消息
class CompleteMessage(BaseModel):
    type: str = "complete"
    build_id: str
    result: BuildRecommendationResponse
```

## 14.5 错误处理和中间件

### 错误处理中间件 (src/poe2build/web/middleware/error_handler.py)
1. **统一错误响应格式**
2. **错误日志记录**
3. **用户友好错误消息**
4. **开发/生产环境错误详情控制**

### CORS中间件 (src/poe2build/web/middleware/cors.py)
1. **跨域请求支持**
2. **安全配置**
3. **预检请求处理**

## 14.6 与PoE2AIOrchestrator集成

### 集成实现要求
1. **异步适配器**
   - 将同步的协调器调用适配为异步
   - 支持长时间运行任务的进度追踪

2. **状态管理**
   - 维护构筑生成任务状态
   - 支持任务取消和重试

3. **缓存策略**
   - API响应缓存
   - 构筑模板缓存
   - 系统状态缓存

### 生命周期管理
```python
# 应用启动事件
@app.on_event("startup")
async def startup_event():
    # 初始化PoE2AIOrchestrator
    # 预热缓存
    # 健康检查

# 应用关闭事件
@app.on_event("shutdown") 
async def shutdown_event():
    # 清理资源
    # 关闭连接
    # 保存状态
```

## 14.7 性能优化

### 缓存策略
1. **响应缓存**
   - 构筑推荐结果缓存（TTL: 30分钟）
   - 系统状态缓存（TTL: 1分钟）
   - 静态内容缓存

2. **数据库连接池**
   - 如果使用数据库存储
   - 连接复用和管理

### 并发处理
1. **异步处理**
   - 所有IO操作异步化
   - 构筑生成任务队列

2. **资源限制**
   - 并发请求限制
   - 内存使用监控
   - 超时处理

## 14.8 安全考虑

### API安全
1. **输入验证**
   - 请求参数验证
   - SQL注入防护
   - XSS防护

2. **速率限制**
   - API调用频率限制
   - 恶意请求检测

### 生产环境配置
1. **HTTPS配置**
2. **安全头设置**
3. **日志脱敏**
4. **环境变量管理**

## 14.9 监控和日志

### 应用监控
1. **健康检查端点**
2. **性能指标收集**
3. **错误率监控**
4. **响应时间统计**

### 日志系统
1. **结构化日志**
2. **日志级别配置**
3. **日志轮转**
4. **敏感信息过滤**

## 14.10 启动脚本

### 开发环境启动
```bash
# 开发模式启动
python -m uvicorn src.poe2build.web.app:app --reload --host 0.0.0.0 --port 8080

# 或通过主程序启动
python poe2_ai_orchestrator.py --web --debug
```

### 生产环境启动
```bash
# 生产模式启动
python -m uvicorn src.poe2build.web.app:app --host 0.0.0.0 --port 8080 --workers 4

# Docker容器启动
docker run -p 8080:8080 poe2-build-generator
```

请确保FastAPI服务器实现：
1. 与现有PoE2AIOrchestrator完全集成
2. 提供完整的RESTful API
3. 支持实时WebSocket通信
4. 具备生产环境可用性
5. 包含完整的错误处理和日志
6. 支持异步处理和高并发
7. 提供完整的API文档(Swagger UI)

实现时请保持与现有系统的兼容性，确保CLI功能不受影响，并提供清晰的API文档供前端开发使用。