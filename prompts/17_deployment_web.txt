请实现PoE2智能构筑生成器Web版本的部署配置和优化：

## 17.1 生产环境配置

### Docker容器化 (Dockerfile)
```dockerfile
# 多阶段构建 - 前端构建阶段
FROM node:18-alpine AS frontend-builder

WORKDIR /frontend
COPY web/package*.json ./
RUN npm ci --only=production

COPY web/ ./
RUN npm run build

# Python应用阶段
FROM python:3.11-slim

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# 复制Python依赖文件
COPY requirements.txt requirements-web.txt ./

# 安装Python依赖
RUN pip install --no-cache-dir -r requirements-web.txt

# 复制应用代码
COPY src/ ./src/
COPY poe2_ai_orchestrator.py ./
COPY config/ ./config/

# 复制构建好的前端文件
COPY --from=frontend-builder /frontend/dist ./web/static/

# 创建非root用户
RUN useradd -m -u 1000 poe2user && \
    chown -R poe2user:poe2user /app
USER poe2user

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8080/api/v1/health || exit 1

# 启动命令
CMD ["python", "-m", "uvicorn", "src.poe2build.web.app:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "4"]
```

### Web依赖配置 (requirements-web.txt)
```txt
# FastAPI核心
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6

# WebSocket支持
websockets==11.0.3

# 静态文件和模板
aiofiles==23.2.1
jinja2==3.1.2

# CORS和安全
python-cors==1.7.0
python-jose[cryptography]==3.3.0

# 监控和日志
prometheus-fastapi-instrumentator==6.1.0
structlog==23.2.0

# 基础依赖
-r requirements.txt
```

### 环境配置 (.env.production)
```env
# Web服务器配置
HOST=0.0.0.0
PORT=8080
WORKERS=4
DEBUG=false

# CORS配置
CORS_ORIGINS=["https://poe2builds.example.com"]
CORS_CREDENTIALS=true

# 静态文件配置
STATIC_DIR=web/static
STATIC_URL=/static
TEMPLATES_DIR=web/templates

# 缓存配置
REDIS_URL=redis://redis:6379/0
CACHE_TTL=3600

# 数据库配置（如果使用）
DATABASE_URL=postgresql://user:pass@postgres:5432/poe2builds

# 监控配置
SENTRY_DSN=https://your-sentry-dsn
PROMETHEUS_METRICS=true

# SSL/TLS配置
SSL_CERT_PATH=/etc/ssl/certs/cert.pem
SSL_KEY_PATH=/etc/ssl/private/key.pem

# 日志配置
LOG_LEVEL=INFO
LOG_FORMAT=json
LOG_FILE=/var/log/poe2builds/app.log
```

## 17.2 Docker Compose部署

### 完整服务栈 (docker-compose.yml)
```yaml
version: '3.8'

services:
  # 主应用服务
  poe2-web:
    build: .
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/poe2builds
    depends_on:
      - redis
      - postgres
    volumes:
      - ./logs:/var/log/poe2builds
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - poe2-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - poe2-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL数据库（可选）
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=poe2builds
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - poe2-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./web/static:/var/www/static:ro
    depends_on:
      - poe2-web
    restart: unless-stopped
    networks:
      - poe2-network

  # 监控服务
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - poe2-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - poe2-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  poe2-network:
    driver: bridge
```

### Nginx反向代理配置 (nginx.conf)
```nginx
events {
    worker_connections 1024;
}

http {
    upstream poe2_backend {
        server poe2-web:8080;
    }

    # 启用gzip压缩
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;
    gzip_min_length 1000;

    # 静态文件缓存
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        root /var/www/static;
        try_files $uri @backend;
    }

    # API请求代理
    location /api/ {
        proxy_pass http://poe2_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket支持
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # 超时配置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # WebSocket代理
    location /ws/ {
        proxy_pass http://poe2_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 主页面和静态内容
    location / {
        try_files $uri @backend;
    }

    location @backend {
        proxy_pass http://poe2_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # SSL配置
    listen 443 ssl http2;
    ssl_certificate /etc/ssl/certs/cert.pem;
    ssl_certificate_key /etc/ssl/certs/key.pem;
    
    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # 安全头
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
}
```

## 17.3 Kubernetes部署

### 应用部署配置 (k8s/deployment.yaml)
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: poe2-web
  labels:
    app: poe2-web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: poe2-web
  template:
    metadata:
      labels:
        app: poe2-web
    spec:
      containers:
      - name: poe2-web
        image: poe2build/web:latest
        ports:
        - containerPort: 8080
        env:
        - name: REDIS_URL
          value: "redis://redis-service:6379/0"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /var/log/poe2builds
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: poe2-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: poe2-logs-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: poe2-web-service
spec:
  selector:
    app: poe2-web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: poe2-web-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - poe2builds.example.com
    secretName: poe2-tls
  rules:
  - host: poe2builds.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: poe2-web-service
            port:
              number: 80
```

## 17.4 监控和日志

### Prometheus监控配置 (monitoring/prometheus.yml)
```yaml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'poe2-web'
    static_configs:
      - targets: ['poe2-web:8080']
    metrics_path: /metrics
    scrape_interval: 10s

  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']

rule_files:
  - "alert_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets: ['alertmanager:9093']
```

### 告警规则 (monitoring/alert_rules.yml)
```yaml
groups:
- name: poe2-web-alerts
  rules:
  - alert: PoE2WebDown
    expr: up{job="poe2-web"} == 0
    for: 1m
    labels:
      severity: critical
    annotations:
      summary: "PoE2 Web service is down"
      description: "PoE2 Web service has been down for more than 1 minute"

  - alert: HighResponseTime
    expr: http_request_duration_seconds{quantile="0.95"} > 5
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "High response time detected"
      description: "95th percentile response time is {{ $value }}s"

  - alert: HighErrorRate
    expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
    for: 1m
    labels:
      severity: warning
    annotations:
      summary: "High error rate detected"
      description: "Error rate is {{ $value }} errors per second"

  - alert: HighMemoryUsage
    expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.8
    for: 5m
    labels:
      severity: warning
    annotations:
      summary: "High memory usage"
      description: "Memory usage is {{ $value | humanizePercentage }}"
```

### 日志配置 (src/poe2build/web/logging_config.py)
```python
import structlog
import logging
import sys
from pythonjsonlogger import jsonlogger
from pathlib import Path

def configure_logging(log_level: str = "INFO", log_format: str = "json"):
    """配置结构化日志"""
    
    # 配置结构化日志
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            structlog.processors.JSONRenderer() if log_format == "json" else structlog.dev.ConsoleRenderer()
        ],
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )
    
    # 配置标准日志
    logging.basicConfig(
        level=getattr(logging, log_level.upper()),
        format='%(message)s',
        stream=sys.stdout
    )
    
    # 配置文件日志
    log_file = Path("/var/log/poe2builds/app.log")
    log_file.parent.mkdir(parents=True, exist_ok=True)
    
    file_handler = logging.FileHandler(log_file)
    if log_format == "json":
        formatter = jsonlogger.JsonFormatter(
            '%(asctime)s %(name)s %(levelname)s %(message)s'
        )
        file_handler.setFormatter(formatter)
    
    root_logger = logging.getLogger()
    root_logger.addHandler(file_handler)
    
    return structlog.get_logger()
```

## 17.5 性能优化

### 应用性能优化
1. **异步处理优化**
```python
# 连接池配置
import aioredis
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.pool import QueuePool

# Redis连接池
redis_pool = aioredis.ConnectionPool.from_url(
    "redis://redis:6379/0",
    max_connections=20
)

# 数据库连接池
engine = create_async_engine(
    "postgresql+asyncpg://user:pass@postgres:5432/poe2builds",
    pool_size=20,
    max_overflow=0,
    poolclass=QueuePool,
    pool_recycle=3600
)
```

2. **缓存策略**
```python
# 多层缓存配置
CACHE_CONFIG = {
    "build_results": {
        "ttl": 1800,  # 30分钟
        "max_size": 1000
    },
    "system_status": {
        "ttl": 60,   # 1分钟
        "max_size": 100
    },
    "static_data": {
        "ttl": 3600,  # 1小时
        "max_size": 500
    }
}
```

### 前端性能优化
1. **资源优化**
```javascript
// 懒加载配置
const lazyLoadConfig = {
    root: null,
    rootMargin: '50px',
    threshold: 0.1
};

// 代码分割
const BuildGenerator = () => import('./components/BuildGenerator.js');
const BuildResults = () => import('./components/BuildResults.js');
```

2. **Service Worker缓存**
```javascript
// service-worker.js
const CACHE_NAME = 'poe2-builds-v1';
const urlsToCache = [
    '/',
    '/static/css/poe2-theme.css',
    '/static/js/app.js',
    '/static/assets/poe2-logo.png'
];

self.addEventListener('install', event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => cache.addAll(urlsToCache))
    );
});
```

## 17.6 安全配置

### Web应用安全
1. **中间件安全配置**
```python
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware

app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["poe2builds.example.com", "*.poe2builds.example.com"]
)
app.add_middleware(HTTPSRedirectMiddleware)
```

2. **API安全**
```python
# 速率限制
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

limiter = Limiter(key_func=get_remote_address)
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

@app.post("/api/v1/build/generate")
@limiter.limit("10/minute")
async def generate_build(request: Request, build_request: BuildRequest):
    pass
```

## 17.7 部署脚本

### 一键部署脚本 (scripts/deploy.sh)
```bash
#!/bin/bash
set -e

# 配置变量
APP_NAME="poe2-web"
DOCKER_REGISTRY="your-registry.com"
VERSION=${1:-latest}

echo "开始部署 PoE2 Build Generator Web 版本 $VERSION"

# 构建镜像
echo "构建Docker镜像..."
docker build -t $DOCKER_REGISTRY/$APP_NAME:$VERSION .
docker build -t $DOCKER_REGISTRY/$APP_NAME:latest .

# 推送镜像
echo "推送镜像到注册表..."
docker push $DOCKER_REGISTRY/$APP_NAME:$VERSION
docker push $DOCKER_REGISTRY/$APP_NAME:latest

# 部署到Kubernetes
if [ "$2" == "k8s" ]; then
    echo "部署到Kubernetes..."
    kubectl apply -f k8s/
    kubectl rollout restart deployment/$APP_NAME
    kubectl rollout status deployment/$APP_NAME
else
    # Docker Compose部署
    echo "使用Docker Compose部署..."
    docker-compose down
    docker-compose pull
    docker-compose up -d
fi

# 健康检查
echo "等待服务启动..."
sleep 30

if curl -f http://localhost:8080/api/v1/health; then
    echo "✅ 部署成功！服务正常运行"
else
    echo "❌ 部署失败！服务健康检查未通过"
    exit 1
fi

echo "🎉 PoE2 Build Generator Web 部署完成！"
echo "访问地址: https://poe2builds.example.com"
```

### CI/CD Pipeline (.github/workflows/deploy.yml)
```yaml
name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Run tests
      run: |
        pip install -r requirements-web.txt
        pytest tests/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/poe2-web:latest
          ${{ secrets.DOCKER_REGISTRY }}/poe2-web:${{ github.sha }}
    
    - name: Deploy to Kubernetes
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s/deployment.yaml
        images: |
          ${{ secrets.DOCKER_REGISTRY }}/poe2-web:${{ github.sha }}
```

请确保Web部署配置：
1. 完整的容器化和编排配置
2. 生产级的性能优化
3. 全面的监控和日志系统
4. 强化的安全配置
5. 自动化的CI/CD流程
6. 多环境支持（开发/测试/生产）
7. 灾难恢复和备份策略
8. 负载均衡和高可用配置

实现时请确保部署方案支持水平扩展、故障恢复和零宕机更新，为PoE2玩家提供稳定可靠的Web服务体验。