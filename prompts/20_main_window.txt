请实现PoE2智能构筑生成器的主窗口和布局系统：

## 20.1 主窗口架构设计

### 窗口层级结构
```
MainWindow (QMainWindow)
├── MenuBar (QMenuBar)                      # 菜单栏
│   ├── File Menu                           # 文件菜单
│   ├── Edit Menu                           # 编辑菜单  
│   ├── View Menu                           # 视图菜单
│   ├── Tools Menu                          # 工具菜单
│   └── Help Menu                           # 帮助菜单
├── ToolBar (QToolBar)                      # 工具栏
│   ├── Quick Actions                       # 快速操作按钮
│   ├── Theme Toggle                        # 主题切换
│   └── System Status                       # 系统状态指示
├── CentralWidget (QWidget)                 # 中央区域
│   └── MainSplitter (QSplitter)           # 主分割器
│       ├── LeftPanel (NavigationPanel)    # 左侧导航面板
│       │   ├── NavigationTree             # 导航树
│       │   ├── QuickFilters              # 快速筛选
│       │   └── RecentBuilds              # 最近构筑
│       ├── CentralPanel (ContentArea)     # 中央内容区
│       │   └── StackedWidget             # 页面堆栈
│       │       ├── WelcomePage           # 欢迎页
│       │       ├── BuildGeneratorPage    # 构筑生成器
│       │       ├── ResultsPage           # 结果展示页
│       │       ├── SettingsPage          # 设置页面
│       │       └── StatusPage            # 系统状态页
│       └── RightPanel (InfoPanel)        # 右侧信息面板
│           ├── BuildSummary              # 构筑摘要
│           ├── SystemInfo                # 系统信息
│           └── TipsWidget                # 提示信息
├── StatusBar (QStatusBar)                 # 状态栏
│   ├── StatusLabel                       # 状态文本
│   ├── ProgressBar                       # 进度条
│   ├── SystemIndicators                  # 系统指示器
│   └── MemoryUsage                       # 内存使用
└── DockWidgets                           # 可停靠窗口
    ├── LogDockWidget                     # 日志面板
    ├── DebugDockWidget                   # 调试面板
    └── NotificationsDockWidget           # 通知面板
```

### 主窗口类设计
```python
class PoE2MainWindow(QMainWindow):
    """PoE2智能构筑生成器主窗口"""
    
    # 信号定义
    page_changed = pyqtSignal(str)            # 页面切换信号
    build_generated = pyqtSignal(dict)        # 构筑生成完成信号
    settings_changed = pyqtSignal(dict)       # 设置变更信号
    window_closing = pyqtSignal()             # 窗口关闭信号
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # 窗口属性
        self.app_name = "PoE2 智能构筑生成器"
        self.app_version = "1.0.0"
        self.current_page = "welcome"
        
        # 核心组件
        self.orchestrator_client = None
        self.settings_manager = None
        self.notification_manager = None
        self.theme_manager = None
        
        # UI组件引用
        self.navigation_panel = None
        self.content_stack = None
        self.info_panel = None
        self.build_generator = None
        self.results_display = None
        
        # 初始化
        self._init_core_services()
        self._init_ui()
        self._init_connections()
        self._load_settings()
        self._show_welcome()
        
    def _init_core_services(self):
        """初始化核心服务"""
        from .services.config_service import ConfigurationManager
        from .services.notification_service import NotificationManager
        from .services.theme_manager import ThemeManager
        from .integration.orchestrator_client import OrchestratorClient
        
        self.settings_manager = ConfigurationManager()
        self.notification_manager = NotificationManager(self)
        self.theme_manager = ThemeManager(self)
        self.orchestrator_client = OrchestratorClient(self)
        
    def _init_ui(self):
        """初始化用户界面"""
        self._setup_window()
        self._create_menu_bar()
        self._create_tool_bar()
        self._create_central_widget()
        self._create_status_bar()
        self._create_dock_widgets()
        self._apply_theme()
        
    def _setup_window(self):
        """设置窗口属性"""
        # 窗口基本属性
        self.setWindowTitle(f"{self.app_name} v{self.app_version}")
        self.setWindowIcon(QIcon("resources/icons/app_icon.ico"))
        
        # 窗口大小和位置
        self.setMinimumSize(1200, 800)
        self.resize(1600, 1000)
        self._center_window()
        
        # 窗口状态
        self.setWindowState(Qt.WindowMaximized)
        
        # 窗口属性
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setAcceptDrops(True)  # 支持拖放
        
    def _center_window(self):
        """窗口居中显示"""
        screen = QApplication.primaryScreen().geometry()
        window_rect = self.geometry()
        
        x = (screen.width() - window_rect.width()) // 2
        y = (screen.height() - window_rect.height()) // 2
        
        self.move(x, y)
```

## 20.2 菜单栏系统实现

### 完整菜单结构
```python
def _create_menu_bar(self):
    """创建菜单栏"""
    menubar = self.menuBar()
    menubar.setStyleSheet("""
    QMenuBar {
        background: #2a2a2a;
        color: #f0f0f0;
        border-bottom: 2px solid #444444;
        padding: 4px;
    }
    QMenuBar::item {
        background: transparent;
        padding: 6px 12px;
        border-radius: 4px;
    }
    QMenuBar::item:selected {
        background: #3a3a3a;
    }
    QMenu {
        background: #2a2a2a;
        color: #f0f0f0;
        border: 2px solid #444444;
        border-radius: 6px;
        padding: 4px;
    }
    QMenu::item {
        padding: 8px 20px;
        border-radius: 4px;
    }
    QMenu::item:selected {
        background: #c9aa71;
        color: #0a0a0a;
    }
    QMenu::separator {
        height: 1px;
        background: #444444;
        margin: 4px 0;
    }
    """)
    
    # 文件菜单
    file_menu = menubar.addMenu("文件(&F)")
    
    # 新建构筑
    new_build_action = QAction("新建构筑(&N)", self)
    new_build_action.setShortcut(QKeySequence.New)
    new_build_action.setStatusTip("创建新的构筑配置")
    new_build_action.triggered.connect(self._new_build)
    file_menu.addAction(new_build_action)
    
    # 打开构筑
    open_build_action = QAction("打开构筑(&O)", self)
    open_build_action.setShortcut(QKeySequence.Open)
    open_build_action.setStatusTip("打开现有构筑文件")
    open_build_action.triggered.connect(self._open_build)
    file_menu.addAction(open_build_action)
    
    file_menu.addSeparator()
    
    # 保存构筑
    save_build_action = QAction("保存构筑(&S)", self)
    save_build_action.setShortcut(QKeySequence.Save)
    save_build_action.setStatusTip("保存当前构筑")
    save_build_action.triggered.connect(self._save_build)
    file_menu.addAction(save_build_action)
    
    # 另存为
    save_as_action = QAction("另存为(&A)", self)
    save_as_action.setShortcut(QKeySequence.SaveAs)
    save_as_action.setStatusTip("将构筑保存到新文件")
    save_as_action.triggered.connect(self._save_build_as)
    file_menu.addAction(save_as_action)
    
    file_menu.addSeparator()
    
    # 最近文件菜单
    recent_menu = file_menu.addMenu("最近文件(&R)")
    self._update_recent_files_menu(recent_menu)
    
    file_menu.addSeparator()
    
    # 导入/导出
    import_menu = file_menu.addMenu("导入(&I)")
    import_pob_action = QAction("从PoB导入", self)
    import_pob_action.triggered.connect(self._import_from_pob)
    import_menu.addAction(import_pob_action)
    
    export_menu = file_menu.addMenu("导出(&E)")
    export_pob_action = QAction("导出到PoB", self)
    export_pob_action.triggered.connect(self._export_to_pob)
    export_menu.addAction(export_pob_action)
    
    export_json_action = QAction("导出为JSON", self)
    export_json_action.triggered.connect(self._export_to_json)
    export_menu.addAction(export_json_action)
    
    file_menu.addSeparator()
    
    # 退出
    exit_action = QAction("退出(&X)", self)
    exit_action.setShortcut(QKeySequence.Quit)
    exit_action.setStatusTip("退出应用程序")
    exit_action.triggered.connect(self.close)
    file_menu.addAction(exit_action)
    
    # 编辑菜单
    edit_menu = menubar.addMenu("编辑(&E)")
    
    # 撤销/重做
    undo_action = QAction("撤销(&U)", self)
    undo_action.setShortcut(QKeySequence.Undo)
    undo_action.triggered.connect(self._undo)
    edit_menu.addAction(undo_action)
    
    redo_action = QAction("重做(&R)", self)
    redo_action.setShortcut(QKeySequence.Redo)
    redo_action.triggered.connect(self._redo)
    edit_menu.addAction(redo_action)
    
    edit_menu.addSeparator()
    
    # 复制/粘贴
    copy_action = QAction("复制构筑(&C)", self)
    copy_action.setShortcut(QKeySequence.Copy)
    copy_action.triggered.connect(self._copy_build)
    edit_menu.addAction(copy_action)
    
    paste_action = QAction("粘贴构筑(&P)", self)
    paste_action.setShortcut(QKeySequence.Paste)
    paste_action.triggered.connect(self._paste_build)
    edit_menu.addAction(paste_action)
    
    edit_menu.addSeparator()
    
    # 查找
    find_action = QAction("查找构筑(&F)", self)
    find_action.setShortcut(QKeySequence.Find)
    find_action.triggered.connect(self._show_find_dialog)
    edit_menu.addAction(find_action)
    
    # 视图菜单
    view_menu = menubar.addMenu("视图(&V)")
    
    # 界面布局
    layout_menu = view_menu.addMenu("界面布局(&L)")
    
    default_layout_action = QAction("默认布局", self)
    default_layout_action.triggered.connect(lambda: self._apply_layout("default"))
    layout_menu.addAction(default_layout_action)
    
    compact_layout_action = QAction("紧凑布局", self)
    compact_layout_action.triggered.connect(lambda: self._apply_layout("compact"))
    layout_menu.addAction(compact_layout_action)
    
    wide_layout_action = QAction("宽屏布局", self)
    wide_layout_action.triggered.connect(lambda: self._apply_layout("wide"))
    layout_menu.addAction(wide_layout_action)
    
    # 面板显示/隐藏
    panels_menu = view_menu.addMenu("面板(&P)")
    
    nav_panel_action = QAction("导航面板", self, checkable=True)
    nav_panel_action.setChecked(True)
    nav_panel_action.triggered.connect(self._toggle_navigation_panel)
    panels_menu.addAction(nav_panel_action)
    
    info_panel_action = QAction("信息面板", self, checkable=True)
    info_panel_action.setChecked(True)
    info_panel_action.triggered.connect(self._toggle_info_panel)
    panels_menu.addAction(info_panel_action)
    
    log_panel_action = QAction("日志面板", self, checkable=True)
    log_panel_action.triggered.connect(self._toggle_log_panel)
    panels_menu.addAction(log_panel_action)
    
    # 缩放控制
    view_menu.addSeparator()
    
    zoom_in_action = QAction("放大(&I)", self)
    zoom_in_action.setShortcut(QKeySequence.ZoomIn)
    zoom_in_action.triggered.connect(self._zoom_in)
    view_menu.addAction(zoom_in_action)
    
    zoom_out_action = QAction("缩小(&O)", self)
    zoom_out_action.setShortcut(QKeySequence.ZoomOut)
    zoom_out_action.triggered.connect(self._zoom_out)
    view_menu.addAction(zoom_out_action)
    
    reset_zoom_action = QAction("重置缩放", self)
    reset_zoom_action.triggered.connect(self._reset_zoom)
    view_menu.addAction(reset_zoom_action)
    
    # 全屏
    view_menu.addSeparator()
    
    fullscreen_action = QAction("全屏模式(&F)", self)
    fullscreen_action.setShortcut(QKeySequence.FullScreen)
    fullscreen_action.setCheckable(True)
    fullscreen_action.triggered.connect(self._toggle_fullscreen)
    view_menu.addAction(fullscreen_action)
    
    # 工具菜单
    tools_menu = menubar.addMenu("工具(&T)")
    
    # 系统检查
    health_check_action = QAction("系统健康检查", self)
    health_check_action.triggered.connect(self._run_health_check)
    tools_menu.addAction(health_check_action)
    
    # 数据管理
    data_menu = tools_menu.addMenu("数据管理")
    
    clear_cache_action = QAction("清除缓存", self)
    clear_cache_action.triggered.connect(self._clear_cache)
    data_menu.addAction(clear_cache_action)
    
    update_data_action = QAction("更新游戏数据", self)
    update_data_action.triggered.connect(self._update_game_data)
    data_menu.addAction(update_data_action)
    
    # 性能分析
    tools_menu.addSeparator()
    
    performance_action = QAction("性能分析", self)
    performance_action.triggered.connect(self._show_performance_monitor)
    tools_menu.addAction(performance_action)
    
    # 设置
    tools_menu.addSeparator()
    
    preferences_action = QAction("首选项(&P)", self)
    preferences_action.setShortcut(QKeySequence.Preferences)
    preferences_action.triggered.connect(self._show_preferences)
    tools_menu.addAction(preferences_action)
    
    # 帮助菜单
    help_menu = menubar.addMenu("帮助(&H)")
    
    # 帮助文档
    help_action = QAction("用户指南(&H)", self)
    help_action.setShortcut(QKeySequence.HelpContents)
    help_action.triggered.connect(self._show_help)
    help_menu.addAction(help_action)
    
    # 快捷键
    shortcuts_action = QAction("快捷键参考", self)
    shortcuts_action.triggered.connect(self._show_shortcuts)
    help_menu.addAction(shortcuts_action)
    
    help_menu.addSeparator()
    
    # 在线资源
    website_action = QAction("项目主页", self)
    website_action.triggered.connect(self._open_website)
    help_menu.addAction(website_action)
    
    feedback_action = QAction("反馈问题", self)
    feedback_action.triggered.connect(self._open_feedback)
    help_menu.addAction(feedback_action)
    
    help_menu.addSeparator()
    
    # 关于
    about_action = QAction("关于(&A)", self)
    about_action.triggered.connect(self._show_about)
    help_menu.addAction(about_action)
    
    # 存储菜单引用供后续使用
    self.file_menu = file_menu
    self.recent_files_menu = recent_menu
```

## 20.3 工具栏系统实现

### 主工具栏设计
```python
def _create_tool_bar(self):
    """创建工具栏"""
    toolbar = self.addToolBar("主工具栏")
    toolbar.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
    toolbar.setMovable(False)
    toolbar.setFloatable(False)
    
    # 工具栏样式
    toolbar.setStyleSheet("""
    QToolBar {
        background: #2a2a2a;
        border: none;
        border-bottom: 2px solid #444444;
        padding: 4px;
        spacing: 4px;
    }
    QToolButton {
        background: transparent;
        border: 2px solid transparent;
        border-radius: 6px;
        padding: 6px 12px;
        color: #f0f0f0;
        font-weight: 500;
    }
    QToolButton:hover {
        background: #3a3a3a;
        border-color: #c9aa71;
    }
    QToolButton:pressed {
        background: #1a1a1a;
    }
    QToolButton:checked {
        background: #c9aa71;
        color: #0a0a0a;
        border-color: #c9aa71;
    }
    """)
    
    # 新建构筑按钮
    new_build_btn = QAction(QIcon("resources/icons/ui_icons/new_build.png"), 
                           "新建构筑", self)
    new_build_btn.setStatusTip("创建新的构筑配置")
    new_build_btn.triggered.connect(self._new_build)
    toolbar.addAction(new_build_btn)
    
    # 打开构筑按钮  
    open_build_btn = QAction(QIcon("resources/icons/ui_icons/open_build.png"),
                            "打开构筑", self)
    open_build_btn.triggered.connect(self._open_build)
    toolbar.addAction(open_build_btn)
    
    # 保存构筑按钮
    save_build_btn = QAction(QIcon("resources/icons/ui_icons/save_build.png"),
                            "保存构筑", self)
    save_build_btn.triggered.connect(self._save_build)
    toolbar.addAction(save_build_btn)
    
    toolbar.addSeparator()
    
    # 快速生成按钮
    quick_generate_btn = QAction(QIcon("resources/icons/ui_icons/generate.png"),
                                "快速生成", self)
    quick_generate_btn.setStatusTip("使用默认设置快速生成构筑")
    quick_generate_btn.triggered.connect(self._quick_generate)
    toolbar.addAction(quick_generate_btn)
    
    # PoB导出按钮
    export_pob_btn = QAction(QIcon("resources/icons/ui_icons/pob_export.png"),
                            "导出PoB", self)
    export_pob_btn.setStatusTip("将构筑导出到Path of Building")
    export_pob_btn.triggered.connect(self._export_to_pob)
    toolbar.addAction(export_pob_btn)
    
    toolbar.addSeparator()
    
    # 系统状态组件
    self._create_system_status_widgets(toolbar)
    
    # 右侧弹性空间
    spacer = QWidget()
    spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
    toolbar.addWidget(spacer)
    
    # 主题切换按钮
    theme_btn = QAction(QIcon("resources/icons/ui_icons/theme_toggle.png"),
                       "切换主题", self)
    theme_btn.triggered.connect(self._toggle_theme)
    toolbar.addAction(theme_btn)
    
    # 设置按钮
    settings_btn = QAction(QIcon("resources/icons/ui_icons/settings.png"),
                          "设置", self)
    settings_btn.triggered.connect(self._show_preferences)
    toolbar.addAction(settings_btn)
    
    # 帮助按钮
    help_btn = QAction(QIcon("resources/icons/ui_icons/help.png"),
                      "帮助", self)
    help_btn.triggered.connect(self._show_help)
    toolbar.addAction(help_btn)
    
def _create_system_status_widgets(self, toolbar):
    """创建系统状态指示器"""
    # PoB2连接状态
    self.pob2_status = QLabel()
    self.pob2_status.setPixmap(QPixmap("resources/icons/ui_icons/pob2_offline.png")
                              .scaled(16, 16, Qt.KeepAspectRatio, Qt.SmoothTransformation))
    self.pob2_status.setToolTip("PoB2连接状态: 未连接")
    toolbar.addWidget(self.pob2_status)
    
    # API连接状态
    self.api_status = QLabel()
    self.api_status.setPixmap(QPixmap("resources/icons/ui_icons/api_checking.png")
                             .scaled(16, 16, Qt.KeepAspectRatio, Qt.SmoothTransformation))
    self.api_status.setToolTip("API连接状态: 检查中")
    toolbar.addWidget(self.api_status)
    
    # 内存使用指示器
    self.memory_indicator = QProgressBar()
    self.memory_indicator.setMaximumWidth(100)
    self.memory_indicator.setMaximumHeight(16)
    self.memory_indicator.setTextVisible(False)
    self.memory_indicator.setToolTip("内存使用情况")
    self.memory_indicator.setStyleSheet("""
    QProgressBar {
        border: 1px solid #444444;
        border-radius: 3px;
        background: #1a1a1a;
    }
    QProgressBar::chunk {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #27ae60, stop:0.7 #f39c12, stop:1 #e74c3c);
        border-radius: 2px;
    }
    """)
    toolbar.addWidget(self.memory_indicator)
    
    # 定期更新系统状态
    self.status_timer = QTimer()
    self.status_timer.timeout.connect(self._update_system_status)
    self.status_timer.start(5000)  # 每5秒更新一次
```

## 20.4 中央内容区域实现

### 分割窗口布局
```python
def _create_central_widget(self):
    """创建中央部件"""
    central_widget = QWidget()
    self.setCentralWidget(central_widget)
    
    # 主布局
    main_layout = QHBoxLayout(central_widget)
    main_layout.setContentsMargins(0, 0, 0, 0)
    main_layout.setSpacing(0)
    
    # 主分割器 (水平分割)
    self.main_splitter = QSplitter(Qt.Horizontal)
    self.main_splitter.setStyleSheet("""
    QSplitter::handle {
        background: #444444;
        width: 3px;
    }
    QSplitter::handle:hover {
        background: #c9aa71;
    }
    """)
    
    # 创建三个主要面板
    self._create_navigation_panel()
    self._create_content_area()
    self._create_info_panel()
    
    # 添加到分割器
    self.main_splitter.addWidget(self.navigation_panel)
    self.main_splitter.addWidget(self.content_area)
    self.main_splitter.addWidget(self.info_panel)
    
    # 设置分割器比例
    self.main_splitter.setStretchFactor(0, 0)  # 导航面板固定宽度
    self.main_splitter.setStretchFactor(1, 1)  # 内容区域可伸缩
    self.main_splitter.setStretchFactor(2, 0)  # 信息面板固定宽度
    
    # 设置初始大小
    self.main_splitter.setSizes([300, 1000, 300])
    
    main_layout.addWidget(self.main_splitter)

def _create_navigation_panel(self):
    """创建左侧导航面板"""
    from .views.navigation_panel import NavigationPanel
    
    self.navigation_panel = NavigationPanel(self)
    self.navigation_panel.setMinimumWidth(250)
    self.navigation_panel.setMaximumWidth(400)
    
    # 连接导航信号
    self.navigation_panel.page_requested.connect(self._switch_page)
    self.navigation_panel.build_selected.connect(self._load_build)
    self.navigation_panel.filter_changed.connect(self._apply_filter)

def _create_content_area(self):
    """创建中央内容区域"""
    self.content_area = QWidget()
    self.content_area.setMinimumWidth(600)
    
    # 内容区布局
    content_layout = QVBoxLayout(self.content_area)
    content_layout.setContentsMargins(8, 8, 8, 8)
    
    # 页面标题栏
    self.page_title_bar = self._create_page_title_bar()
    content_layout.addWidget(self.page_title_bar)
    
    # 页面内容堆栈
    self.content_stack = QStackedWidget()
    content_layout.addWidget(self.content_stack)
    
    # 创建各个页面
    self._create_pages()

def _create_page_title_bar(self):
    """创建页面标题栏"""
    title_bar = QWidget()
    title_bar.setFixedHeight(60)
    title_bar.setStyleSheet("""
    QWidget {
        background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3a3a3a, stop:1 #2a2a2a);
        border: 2px solid #444444;
        border-radius: 8px;
        margin-bottom: 8px;
    }
    """)
    
    layout = QHBoxLayout(title_bar)
    layout.setContentsMargins(16, 8, 16, 8)
    
    # 页面标题
    self.page_title_label = QLabel("欢迎使用PoE2智能构筑生成器")
    self.page_title_label.setStyleSheet("""
        font-size: 18px;
        font-weight: bold;
        color: #c9aa71;
        background: transparent;
        border: none;
    """)
    layout.addWidget(self.page_title_label)
    
    layout.addStretch()
    
    # 页面操作按钮区域
    self.page_actions_layout = QHBoxLayout()
    layout.addLayout(self.page_actions_layout)
    
    return title_bar

def _create_pages(self):
    """创建所有页面"""
    from .views.welcome_page import WelcomePage
    from .views.build_generator_page import BuildGeneratorPage  
    from .views.results_page import ResultsPage
    from .views.settings_page import SettingsPage
    from .views.status_page import StatusPage
    
    # 欢迎页面
    self.welcome_page = WelcomePage(self)
    self.welcome_page.quick_start.connect(self._quick_start_build)
    self.content_stack.addWidget(self.welcome_page)
    
    # 构筑生成器页面
    self.build_generator_page = BuildGeneratorPage(self)
    self.build_generator_page.build_generated.connect(self._on_build_generated)
    self.build_generator_page.preview_requested.connect(self._show_build_preview)
    self.content_stack.addWidget(self.build_generator_page)
    
    # 结果展示页面  
    self.results_page = ResultsPage(self)
    self.results_page.build_selected.connect(self._show_build_details)
    self.results_page.export_requested.connect(self._export_build)
    self.content_stack.addWidget(self.results_page)
    
    # 设置页面
    self.settings_page = SettingsPage(self)
    self.settings_page.settings_changed.connect(self._apply_settings)
    self.content_stack.addWidget(self.settings_page)
    
    # 系统状态页面
    self.status_page = StatusPage(self)
    self.status_page.health_check_requested.connect(self._run_health_check)
    self.content_stack.addWidget(self.status_page)

def _create_info_panel(self):
    """创建右侧信息面板"""
    from .views.info_panel import InfoPanel
    
    self.info_panel = InfoPanel(self)
    self.info_panel.setMinimumWidth(250)
    self.info_panel.setMaximumWidth(400)
    
    # 连接信息面板信号
    self.info_panel.tip_clicked.connect(self._handle_tip_click)
    self.info_panel.system_alert.connect(self._handle_system_alert)
```

## 20.5 状态栏系统实现

### 状态栏组件设计
```python
def _create_status_bar(self):
    """创建状态栏"""
    status_bar = self.statusBar()
    status_bar.setStyleSheet("""
    QStatusBar {
        background: #2a2a2a;
        color: #f0f0f0;
        border-top: 2px solid #444444;
        padding: 4px;
    }
    QStatusBar::item {
        border: none;
    }
    """)
    
    # 主状态标签 (左侧)
    self.status_label = QLabel("就绪")
    self.status_label.setStyleSheet("padding: 0 8px;")
    status_bar.addWidget(self.status_label)
    
    # 弹性空间
    status_bar.addWidget(QLabel(), 1)
    
    # 进度条 (中央，需要时显示)
    self.progress_bar = QProgressBar()
    self.progress_bar.setMaximumWidth(200)
    self.progress_bar.setMaximumHeight(16)
    self.progress_bar.setVisible(False)
    self.progress_bar.setStyleSheet("""
    QProgressBar {
        border: 1px solid #444444;
        border-radius: 3px;
        background: #1a1a1a;
        text-align: center;
        color: #f0f0f0;
    }
    QProgressBar::chunk {
        background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #c9aa71, stop:1 #d4b575);
        border-radius: 2px;
    }
    """)
    status_bar.addPermanentWidget(self.progress_bar)
    
    # 系统状态指示器组
    self._create_status_indicators(status_bar)
    
    # 内存使用显示
    self.memory_label = QLabel("内存: 0MB")
    self.memory_label.setStyleSheet("padding: 0 8px; color: #cccccc;")
    status_bar.addPermanentWidget(self.memory_label)
    
    # 当前时间显示
    self.time_label = QLabel()
    self.time_label.setStyleSheet("padding: 0 8px; color: #cccccc;")
    status_bar.addPermanentWidget(self.time_label)
    
    # 定时更新时间和系统信息
    self.status_timer = QTimer()
    self.status_timer.timeout.connect(self._update_status_bar)
    self.status_timer.start(1000)  # 每秒更新

def _create_status_indicators(self, status_bar):
    """创建状态指示器"""
    # PoB2连接状态
    self.pob2_indicator = QLabel()
    self.pob2_indicator.setPixmap(self._get_status_icon("offline"))
    self.pob2_indicator.setToolTip("PoB2连接状态")
    status_bar.addPermanentWidget(self.pob2_indicator)
    
    # 网络连接状态
    self.network_indicator = QLabel()
    self.network_indicator.setPixmap(self._get_status_icon("checking"))
    self.network_indicator.setToolTip("网络连接状态")
    status_bar.addPermanentWidget(self.network_indicator)
    
    # 数据更新状态
    self.data_indicator = QLabel()
    self.data_indicator.setPixmap(self._get_status_icon("ok"))
    self.data_indicator.setToolTip("数据更新状态")
    status_bar.addPermanentWidget(self.data_indicator)

def _get_status_icon(self, status):
    """获取状态图标"""
    icons = {
        "ok": "resources/icons/ui_icons/status_ok.png",
        "warning": "resources/icons/ui_icons/status_warning.png",
        "error": "resources/icons/ui_icons/status_error.png",
        "offline": "resources/icons/ui_icons/status_offline.png",
        "checking": "resources/icons/ui_icons/status_checking.png"
    }
    
    pixmap = QPixmap(icons.get(status, icons["offline"]))
    return pixmap.scaled(16, 16, Qt.KeepAspectRatio, Qt.SmoothTransformation)

def _update_status_bar(self):
    """更新状态栏信息"""
    # 更新时间
    current_time = QTime.currentTime().toString("hh:mm:ss")
    self.time_label.setText(current_time)
    
    # 更新内存使用
    import psutil
    memory_mb = psutil.Process().memory_info().rss // (1024 * 1024)
    self.memory_label.setText(f"内存: {memory_mb}MB")
    
    # 更新系统状态
    self._check_system_status()

def _check_system_status(self):
    """检查系统状态"""
    # 检查PoB2连接
    if self.orchestrator_client.is_pob2_available():
        self.pob2_indicator.setPixmap(self._get_status_icon("ok"))
        self.pob2_indicator.setToolTip("PoB2连接正常")
    else:
        self.pob2_indicator.setPixmap(self._get_status_icon("offline"))
        self.pob2_indicator.setToolTip("PoB2未连接")
    
    # 检查网络连接
    if self.orchestrator_client.check_network_status():
        self.network_indicator.setPixmap(self._get_status_icon("ok"))
        self.network_indicator.setToolTip("网络连接正常")
    else:
        self.network_indicator.setPixmap(self._get_status_icon("error"))
        self.network_indicator.setToolTip("网络连接异常")
```

## 20.6 停靠窗口系统

### 可停靠面板实现
```python
def _create_dock_widgets(self):
    """创建停靠窗口"""
    # 日志面板
    self.log_dock = self._create_log_dock()
    self.addDockWidget(Qt.BottomDockWidgetArea, self.log_dock)
    self.log_dock.hide()  # 默认隐藏
    
    # 调试面板 (开发模式)
    if self.settings_manager.get("debug_mode", False):
        self.debug_dock = self._create_debug_dock()
        self.addDockWidget(Qt.BottomDockWidgetArea, self.debug_dock)
        self.debug_dock.hide()
    
    # 通知历史面板
    self.notifications_dock = self._create_notifications_dock()
    self.addDockWidget(Qt.RightDockWidgetArea, self.notifications_dock)
    self.notifications_dock.hide()

def _create_log_dock(self):
    """创建日志停靠面板"""
    dock = QDockWidget("系统日志", self)
    dock.setFeatures(QDockWidget.DockWidgetClosable | 
                     QDockWidget.DockWidgetMovable)
    
    # 日志查看器
    from .components.log_viewer import LogViewer
    log_viewer = LogViewer()
    
    # 设置日志过滤器
    log_filter_layout = QHBoxLayout()
    
    level_combo = QComboBox()
    level_combo.addItems(["全部", "调试", "信息", "警告", "错误"])
    level_combo.currentTextChanged.connect(log_viewer.set_level_filter)
    
    search_input = QLineEdit()
    search_input.setPlaceholderText("搜索日志...")
    search_input.textChanged.connect(log_viewer.set_search_filter)
    
    clear_btn = QPushButton("清除日志")
    clear_btn.clicked.connect(log_viewer.clear_logs)
    
    log_filter_layout.addWidget(QLabel("级别:"))
    log_filter_layout.addWidget(level_combo)
    log_filter_layout.addWidget(search_input)
    log_filter_layout.addWidget(clear_btn)
    log_filter_layout.addStretch()
    
    # 组装停靠面板内容
    dock_widget = QWidget()
    dock_layout = QVBoxLayout(dock_widget)
    
    filter_frame = QFrame()
    filter_frame.setLayout(log_filter_layout)
    dock_layout.addWidget(filter_frame)
    dock_layout.addWidget(log_viewer)
    
    dock.setWidget(dock_widget)
    return dock

def _create_notifications_dock(self):
    """创建通知历史停靠面板"""
    dock = QDockWidget("通知历史", self)
    dock.setFeatures(QDockWidget.DockWidgetClosable |
                     QDockWidget.DockWidgetMovable)
    
    # 通知历史查看器
    from .components.notification_history import NotificationHistory
    notification_history = NotificationHistory()
    
    # 连接到通知管理器
    self.notification_manager.notification_sent.connect(
        notification_history.add_notification
    )
    
    dock.setWidget(notification_history)
    return dock
```

## 20.7 页面切换和状态管理

### 页面管理系统
```python
def _switch_page(self, page_name):
    """切换页面"""
    page_mapping = {
        "welcome": 0,
        "generator": 1, 
        "results": 2,
        "settings": 3,
        "status": 4
    }
    
    if page_name not in page_mapping:
        self.notification_manager.show_notification(
            f"未知页面: {page_name}", "warning"
        )
        return
    
    # 保存当前页面状态
    self._save_page_state(self.current_page)
    
    # 切换页面
    page_index = page_mapping[page_name]
    self.content_stack.setCurrentIndex(page_index)
    
    # 更新页面标题和操作按钮
    self._update_page_ui(page_name)
    
    # 恢复新页面状态
    self._restore_page_state(page_name)
    
    # 更新当前页面记录
    self.current_page = page_name
    
    # 发射页面切换信号
    self.page_changed.emit(page_name)
    
    # 更新状态栏
    page_titles = {
        "welcome": "欢迎页面",
        "generator": "构筑生成器", 
        "results": "结果展示",
        "settings": "应用设置",
        "status": "系统状态"
    }
    
    self.status_label.setText(f"当前页面: {page_titles.get(page_name, page_name)}")

def _update_page_ui(self, page_name):
    """更新页面UI元素"""
    # 清空现有操作按钮
    self._clear_page_actions()
    
    # 更新页面标题
    page_titles = {
        "welcome": "欢迎使用PoE2智能构筑生成器",
        "generator": "构筑生成器",
        "results": "构筑生成结果",
        "settings": "应用程序设置", 
        "status": "系统状态监控"
    }
    
    self.page_title_label.setText(page_titles.get(page_name, "未知页面"))
    
    # 添加页面特定的操作按钮
    if page_name == "generator":
        self._add_generator_actions()
    elif page_name == "results":
        self._add_results_actions()
    elif page_name == "settings":
        self._add_settings_actions()
    elif page_name == "status":
        self._add_status_actions()

def _add_generator_actions(self):
    """添加生成器页面操作按钮"""
    from .components.poe2_theme import PoE2Button
    
    # 重置表单按钮
    reset_btn = PoE2Button("重置", button_type="secondary")
    reset_btn.clicked.connect(self.build_generator_page.reset_form)
    self.page_actions_layout.addWidget(reset_btn)
    
    # 加载预设按钮
    preset_btn = PoE2Button("加载预设", button_type="secondary")
    preset_btn.clicked.connect(self.build_generator_page.show_presets)
    self.page_actions_layout.addWidget(preset_btn)
    
    # 高级选项切换
    advanced_btn = PoE2Button("高级选项", button_type="secondary")
    advanced_btn.setCheckable(True)
    advanced_btn.toggled.connect(self.build_generator_page.toggle_advanced)
    self.page_actions_layout.addWidget(advanced_btn)

def _add_results_actions(self):
    """添加结果页面操作按钮"""
    from .components.poe2_theme import PoE2Button
    
    # 导出全部按钮
    export_all_btn = PoE2Button("导出全部", button_type="primary")
    export_all_btn.clicked.connect(self.results_page.export_all_builds)
    self.page_actions_layout.addWidget(export_all_btn)
    
    # 比较构筑按钮
    compare_btn = PoE2Button("比较构筑", button_type="secondary")
    compare_btn.clicked.connect(self.results_page.compare_selected)
    self.page_actions_layout.addWidget(compare_btn)
    
    # 刷新结果按钮
    refresh_btn = PoE2Button("刷新", button_type="secondary")
    refresh_btn.clicked.connect(self.results_page.refresh_results)
    self.page_actions_layout.addWidget(refresh_btn)

def _save_page_state(self, page_name):
    """保存页面状态"""
    if page_name == "generator":
        # 保存生成器表单状态
        state = self.build_generator_page.get_form_state()
        self.settings_manager.set(f"page_state.{page_name}", state)
    elif page_name == "results":
        # 保存结果页面状态
        state = self.results_page.get_view_state()
        self.settings_manager.set(f"page_state.{page_name}", state)

def _restore_page_state(self, page_name):
    """恢复页面状态"""
    state = self.settings_manager.get(f"page_state.{page_name}", {})
    
    if page_name == "generator" and state:
        self.build_generator_page.set_form_state(state)
    elif page_name == "results" and state:
        self.results_page.set_view_state(state)

def _clear_page_actions(self):
    """清空页面操作按钮"""
    while self.page_actions_layout.count():
        child = self.page_actions_layout.takeAt(0)
        if child.widget():
            child.widget().deleteLater()
```

## 20.8 窗口状态管理

### 设置存储和恢复
```python
def _load_settings(self):
    """加载应用设置"""
    # 恢复窗口几何形状
    geometry = self.settings_manager.get("window.geometry")
    if geometry:
        self.restoreGeometry(geometry)
    
    # 恢复窗口状态
    window_state = self.settings_manager.get("window.state")
    if window_state:
        self.restoreState(window_state)
    
    # 恢复分割器状态
    splitter_state = self.settings_manager.get("splitter.state")
    if splitter_state:
        self.main_splitter.restoreState(splitter_state)
    
    # 恢复主题设置
    theme = self.settings_manager.get("appearance.theme", "dark")
    self.theme_manager.set_theme(theme)
    
    # 恢复最后打开的页面
    last_page = self.settings_manager.get("ui.last_page", "welcome")
    self._switch_page(last_page)

def _save_settings(self):
    """保存应用设置"""
    # 保存窗口几何形状
    self.settings_manager.set("window.geometry", self.saveGeometry())
    
    # 保存窗口状态
    self.settings_manager.set("window.state", self.saveState())
    
    # 保存分割器状态
    self.settings_manager.set("splitter.state", self.main_splitter.saveState())
    
    # 保存当前页面
    self.settings_manager.set("ui.last_page", self.current_page)
    
    # 保存其他UI状态
    ui_state = {
        "navigation_visible": self.navigation_panel.isVisible(),
        "info_panel_visible": self.info_panel.isVisible(),
        "log_panel_visible": self.log_dock.isVisible() if hasattr(self, 'log_dock') else False
    }
    self.settings_manager.set("ui.panels", ui_state)

def closeEvent(self, event):
    """窗口关闭事件"""
    # 发射关闭信号
    self.window_closing.emit()
    
    # 保存设置
    self._save_settings()
    
    # 清理资源
    self._cleanup_resources()
    
    # 确认退出
    if self._confirm_exit():
        event.accept()
    else:
        event.ignore()

def _confirm_exit(self):
    """确认退出"""
    # 检查是否有未保存的更改
    if self._has_unsaved_changes():
        reply = QMessageBox.question(
            self, "确认退出",
            "有未保存的更改，确定要退出吗？",
            QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel
        )
        
        if reply == QMessageBox.Cancel:
            return False
        elif reply == QMessageBox.Yes:
            return True
        else:  # QMessageBox.No - 先保存再退出
            if self._save_all_changes():
                return True
            else:
                return False
    
    return True

def _cleanup_resources(self):
    """清理资源"""
    # 停止所有定时器
    if hasattr(self, 'status_timer'):
        self.status_timer.stop()
    
    # 关闭后端连接
    if self.orchestrator_client:
        self.orchestrator_client.disconnect()
    
    # 清理通知
    if self.notification_manager:
        self.notification_manager.clear_all()
    
    # 清理临时文件
    self.settings_manager.cleanup_temp_files()
```

请确保主窗口实现：
1. 完整的菜单和工具栏功能
2. 灵活的分割窗口布局系统
3. 专业的状态栏和系统监控
4. 可停靠的辅助面板
5. 完善的页面切换和状态管理
6. 稳定的设置存储和恢复机制

主窗口应该提供直观的用户界面导航，清晰的功能组织，以及专业的PoE2主题视觉体验。