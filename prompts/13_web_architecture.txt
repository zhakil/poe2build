请设计并实现PoE2智能构筑生成器的Web前端架构：

## 13.1 整体架构设计

### 技术栈选择
1. **后端Web服务器**: FastAPI
   - 原因: 现代、高性能、自动API文档生成
   - 异步支持，与现有PoE2AIOrchestrator完美集成
   - 自动JSON序列化/反序列化

2. **前端技术**: HTML5 + CSS3 + Vanilla JavaScript (ES6+)
   - 原因: 轻量级，无额外依赖，快速加载
   - 现代浏览器原生支持，兼容性好
   - 便于维护和扩展

3. **UI框架**: 自研轻量级组件
   - PoE2主题风格设计
   - 响应式布局支持

### 项目结构设计
```
E:\zhakil\github\poe2build\
├── src/poe2build/web/           # Web服务模块
│   ├── __init__.py
│   ├── app.py                   # FastAPI主应用
│   ├── routes/                  # API路由
│   │   ├── __init__.py
│   │   ├── build_routes.py      # 构筑相关API
│   │   ├── health_routes.py     # 健康检查API
│   │   └── static_routes.py     # 静态文件服务
│   ├── models/                  # Web请求/响应模型
│   │   ├── __init__.py
│   │   ├── build_request.py
│   │   └── build_response.py
│   └── middleware/              # 中间件
│       ├── __init__.py
│       ├── cors.py
│       └── error_handler.py
├── web/                         # 前端文件
│   ├── static/                  # 静态资源
│   │   ├── css/
│   │   │   ├── poe2-theme.css   # PoE2主题样式
│   │   │   ├── components.css   # 组件样式
│   │   │   └── responsive.css   # 响应式样式
│   │   ├── js/
│   │   │   ├── app.js           # 主应用逻辑
│   │   │   ├── api.js           # API调用封装
│   │   │   ├── components.js    # UI组件
│   │   │   └── utils.js         # 工具函数
│   │   └── assets/              # 图片资源
│   │       ├── poe2-logo.png
│   │       ├── class-icons/     # 职业图标
│   │       └── backgrounds/     # 背景图片
│   ├── templates/               # HTML模板
│   │   ├── index.html           # 主页面
│   │   ├── build-result.html    # 构筑结果页面
│   │   └── health.html          # 系统状态页面
│   └── components/              # 可复用组件
│       ├── build-form.html      # 构筑配置表单
│       ├── build-card.html      # 构筑展示卡片
│       └── loading-spinner.html # 加载动画
```

## 13.2 核心功能设计

### 主要页面和功能
1. **首页 (index.html)**
   - PoE2风格的欢迎界面
   - 快速开始按钮
   - 功能特性介绍
   - 系统状态概览

2. **构筑生成器页面**
   - 职业选择器（带图标）
   - 构筑目标选择（清速、Boss击杀、平衡等）
   - 预算配置滑块
   - 高级选项折叠面板
   - 实时构筑推荐结果

3. **构筑结果展示页面**
   - 推荐构筑列表
   - 详细统计数据（DPS、EHP、抗性等）
   - 技能宝石配置
   - 装备推荐
   - PoB2导入代码生成
   - 市场价格信息

4. **系统监控页面**
   - 各组件健康状态
   - RAG知识库状态
   - PoB2集成状态
   - API响应时间监控

### 用户体验设计
1. **PoE2主题**
   - 深色主题配色
   - 金色装饰边框
   - 粒子效果背景
   - 符合游戏美学的UI元素

2. **交互体验**
   - 流畅的页面切换动画
   - 实时的输入验证反馈
   - Loading状态指示器
   - 错误处理和用户友好提示

3. **响应式设计**
   - 桌面端优化布局
   - 平板设备适配
   - 移动端基础支持

## 13.3 技术实现要求

### FastAPI应用设计
1. **主应用 (src/poe2build/web/app.py)**
   - 集成现有PoE2AIOrchestrator
   - 配置CORS和中间件
   - 静态文件服务配置
   - 错误处理和日志记录

2. **API路由设计**
   - RESTful API设计原则
   - 异步处理支持
   - 请求验证和响应格式统一
   - API版本控制准备

3. **WebSocket支持**
   - 实时构筑生成进度
   - 系统状态实时推送
   - 错误和警告实时通知

### 前端技术要求
1. **现代JavaScript (ES6+)**
   - 模块化代码组织
   - Promise/async-await异步处理
   - Fetch API进行HTTP请求
   - Web Components概念应用

2. **CSS设计**
   - CSS Grid和Flexbox布局
   - CSS变量主题管理
   - 动画和过渡效果
   - 移动优先响应式设计

3. **性能优化**
   - 资源懒加载
   - 图片优化和缓存
   - JavaScript代码分割
   - CSS和JS压缩

## 13.4 集成要求

### 与现有系统集成
1. **PoE2AIOrchestrator集成**
   - 通过FastAPI应用调用现有协调器
   - 保持现有CLI功能不变
   - 共享配置和日志系统

2. **数据流设计**
   - 前端表单 → FastAPI → PoE2AIOrchestrator → 各子系统
   - 异步处理长时间运行的构筑生成
   - 实时状态更新和进度反馈

3. **错误处理**
   - 统一的错误响应格式
   - 用户友好的错误消息
   - 自动重试机制
   - 降级服务支持

### 部署和运维
1. **开发环境配置**
   - 热重载支持
   - 调试模式配置
   - 开发工具集成

2. **生产环境优化**
   - 静态文件压缩和缓存
   - 安全头配置
   - 性能监控集成
   - 日志和错误追踪

## 13.5 实现优先级

### Phase 1: 基础Web服务 (1天)
- 实现FastAPI基础应用
- 创建基础HTML模板
- 实现核心API端点
- 基础前端页面

### Phase 2: 核心功能 (2天)
- 构筑生成表单
- API集成和数据流
- 结果展示页面
- 基础错误处理

### Phase 3: 用户体验优化 (1天)
- PoE2主题样式
- 响应式设计
- 动画和交互效果
- 性能优化

### Phase 4: 高级功能 (1天)
- 实时更新功能
- 系统监控界面
- 高级配置选项
- 测试和调试

请确保Web架构设计：
1. 完全兼容现有后端系统
2. 提供直观友好的用户界面
3. 支持PoE2玩家的使用习惯
4. 具备扩展性和维护性
5. 符合现代Web开发最佳实践

实现时请考虑PoE2玩家的特殊需求，如复杂的构筑配置、详细的数值展示、以及与Path of Building的无缝集成。